import sat.

%colored + no turning
find_plans(Problem) = Plans =>
    K = Problem.agents_count(),
    N = Problem.vertices_count(),
    LB = Problem.lower_bound(),     %lower_bound(to_list(As),LB),

    between(LB+1,999999,M),

    ME = M - 1,

    printf("trying makespan %w\n",M),
    B = new_array(M,K,N),

    B :: 0..1,

    foreach (Group in Problem.groups)
        % Initial positions
        %Initials = Group.initials,
        foreach (Agent in Group.agents)
            V = Group.initialPosition(Agent),
            B[1,Agent,V] = 1
        end,

        % Target positions - each target position is occupied by an agent
        foreach (V in Group.targets)
            sum([B[M,Agent,V] : Agent in Group.agents]) #= 1
        end
    end,

    % Each agent occupies up to one vertex at each time.
    foreach (T in 1..M, A in 1..K)
        sum([B[T,A,V] : V in 1..N]) #=< 1
    end,

    % No two agents occupy the same vertex at any time.
    foreach(T in 1..M, V in 1..N) 
        sum([B[T,A,V] : A in 1..K]) #=< 1   
    end,

    % Every transition is valid
    foreach(T in 1..ME, A in 1..K, V in 1..N) 
        Neibs = Problem.neighboursIDS(V),
        B[T,A,V] #=> sum([B[T+1,A,U] : U in Neibs]) #>= 1,
        foreach(A1 in (A+1)..K, V1 in Neibs, V1!=V)  % no swap constraint
            B[T,A,V]#=0 #\/ B[T+1,A,V1]#=0 #\/ B[T,A1,V1]#=0 #\/ B[T+1,A1,V]#=0
        end
    end,

    solve(B),
    Plans = output_plan(B,Problem).


% Finds plans from values of variables B
output_plan(B,Problem) = Plans =>
    Plans = [],
    foreach (Group in Problem.groups)
        foreach (Agent in Group.agents)
            Position = Group.initialPosition(Agent),
            Plan = [],
            foreach (T in 2..len(B)) % T==1 are initial positions
                foreach (V in 1..Problem.vertices_count)
                    if (B[T,Agent,V] == 1) then
                        if (V == Position) then
                            Plan := [wait] ++ Plan
                        elseif (V == Position + 1) then %to the right
                            Plan := [goRight] ++ Plan,
                            Position := V
                        elseif (V == Position - 1) then %to the left
                            Plan := [goLeft] ++ Plan,
                            Position := V
                        elseif (V >= Position + 1) then %to the bottom
                            Plan := [goDown] ++ Plan,
                            Position := V
                        elseif (V <= Position - 1) then %to the top
                            Plan := [goUp] ++ Plan,
                            Position := V
                        end
                    end
                end
            end,
            Plans := Plans ++ [reverse(Plan)]
        end
    end.

% Static planner for colored multi-agent path finding for grid maps and the makespan objective
% using train motion on agents
% swap is forbidden

import sat.

main([InsFile]) =>
    %printf("solving %s\n",InsFile),
    cl(InsFile),
    main.

main =>
    ins(Graph, As, Grps, LB),                   % read input
    cl_facts(Graph,[$neibs(+,-)]),
    N = len(Graph),                     % N = number of nodes
    create_edges(N, E),                 % E = number of edges
    time(once(path(LB,N,E,to_array(As),Grps,Plan))),
    output_plan(Plan).

test =>
    testins(Graph, As, Grps, LB),                   % read input
    cl_facts(Graph,[$neibs(+,-)]),
    N = len(Graph),                     % N = number of nodes
    create_edges(N, E),                 % E = number of edges
    time(once(path(LB,N,E,to_array(As),Grps,Plan))),
    output_plan(Plan).


%%%%%%%%%%%%%%%%%%%%
% MAIN COMPUTATION %
%%%%%%%%%%%%%%%%%%%%

path_for_delta(N,E,As,K,M,Grps,B) =>
    ME = M - 1,
    GL = len(Grps),

    printf("trying makespan %w\n",M),
    B = new_array(M,K,N),
    C = new_array(ME,K,E),
    F = new_array(GL,M,E),

    %printf("arrays completed!\n"),

    % Initialize the first and last states
    foreach(A in 1..K)    
        (V,FV) = As[A],
        B[1,A,V] = 1,
        sum([B[M,A,FVS] : FVS in FV]) #= 1,
        preprocess_forward(A,V,M,N,B),
        preprocess_backward(A,FV,M,N,B)
    end,
    preprocess_edges(K,N,ME,B,C),

    %printf("preprocessing done!\n"),

    %printf("B %w\n",B),
    %printf("number of free variables\n%w\n",length(vars(B))),

    B :: 0..1,
    C :: 0..1,
    F :: 0..K,

    % Each agent occupies up to one vertex at each time.
    %foreach (T in 1..M, A in 1..K)
    %    sum([B[T,A,V] : V in 1..N]) #=< 1
    %end,

    % No two agents occupy the same vertex at any time.
    foreach(T in 1..M, V in 1..N) 
        sum([B[T,A,V] : A in 1..K]) #=< 1   
    end,

    % if an edge is used in one direction, it can not be used in the other direction (no swap)
    foreach(T in 1..ME, EID in 1..E) 
        edgeid(EID, U, V),
    	edge(OppositeEID, V, U),
        EList = remove_dups([EID,OppositeEID]),
    	sum([C[T,A,W] : A in 1..K, W in EList]) #=< 1   
    end,

    % if an agent is in a node, it needs to leave through one of the edges from that node
    foreach(T in 1..ME, A in 1..K, V in 1..N) 
        out_edges(V,EList),
        B[T,A,V] #= sum([C[T,A,W] : W in EList])
    end,

    % if an agent is in a node, it needs to enter through one of the edges incoming to that node
    foreach(T in 2..M, A in 1..K, V in 1..N) 
        in_edges(V,EList),
        B[T,A,V] #= sum([C[T-1,A,W] : W in EList])
    end,

    % if agent is using an edge, it must arrive to the connected node in next timestep
    %foreach(T in 1..ME, A in 1..K, EID in 1..E) 
    %    edgeid(EID,_,V),
    %    C[T,A,EID] #=> B[T+1,A,V] #= 1
    %end,

    %foreach(Ed in 1..E)
    %    edgeid(Ed,U,V),
    %    printf("edge %w = %w %w\n",Ed,U,V)
    %end,

    % agents need to remain connected
    % pole F je definovano jako F = new_array(GL,M,E) -> M .. makespan, E .. pocet hran, GL .. pocet skupin
    foreach(T in 1..M, G in 1..GL)
        % V každé skupině zvolíme jednoho referenčního agenta R - treba hned prvniho
        R = Grps[G,1],
        AinG = len(Grps[G]),

        % omezeni toku
        foreach (Ed in 1..E)
            F[G,T,Ed] #< AinG
        end,

        % prvni agent
        foreach(V in 1..N)
            in_edges(V, InE),
            out_edges(V, OutE),

            B[T,R,V] #=> sum([F[G,T,Ed] : Ed in OutE]) #= (AinG - 1),
            B[T,R,V] #=> sum([F[G,T,Ed] : Ed in InE]) #= 0
        end,

        % ostatni agenti
        foreach(V in 1..N, A in Grps[G], A != R)
            in_edges(V, InE),
            out_edges(V, OutE),
            B[T,A,V] #=> (sum([F[G,T,Ed] : Ed in OutE]) + 1 #= sum([F[G,T,Ed] : Ed in InE]))
        end,

        foreach(V in 1..N)
            in_edges(V, InE),
            foreach(Ed in InE)
                F[G,T,Ed] #=< AinG * sum([B[T,An,V] : An in Grps[G], An != R])
            end
        end

    end,

    printf("solving start\n"),

    %solve([$dump("cnf.out")],B).
    solve(B).

    %printf("F %w \n",F).
    %printf("B %w \n",B),
    %output_flow(F).

path(LB,N,E,As,Grps,B) =>
    K = len(As),

    %lower_bound(to_list(As),LB),
    printf("mks LB %w\n",LB+1),
    between(LB+1,99999999,M),

    path_for_delta(N,E,As,K,M,Grps,B).


%%%%%%%%%%%%%%%%%%%%%
% UTILITY FUNCTIONS %
%%%%%%%%%%%%%%%%%%%%%

% foreach vertex U, if U is at least distance D away from V,
% then agent A cannot occupy vertex U at time T, T+1, ..., T+D-1
preprocess_forward(A,V,Mks,N,B) =>
    foreach (U in 1..N, V !== U)
    	foreach (T in 1..Mks)
    		if not exist_shorter_path((V,U),T-1)then
    			B[T,A,U] = 0
    		end
        end
    end.

% foreach vertex U, if U is at least distance D away from FV,
% then agent A cannot occupy vertex U at time MaxT, MaxT-1, ..., MaxT-D+1
preprocess_backward(A,FV,Mks,N,B) =>
    foreach (U in 1..N, FV !== U)
    	foreach (T in Mks..-1..1)
            TmpPath = 0,
            foreach (V in FV)
        		if exist_shorter_path((U,V),Mks-T) then
                    TmpPath := 1
                end
            end,
            if TmpPath == 0 then
                B[T,A,U] = 0
            end
        end
    end.


% if agent can not be in a vertex, then he could not use any edge connected to it
preprocess_edges(K,N,M1,B,C) =>
    % outgoing edges
	foreach(A in 1..K, T in 1..M1-1, V in 1..N)
		if B[T,A,V] == 0 then
            out_edges(V,EList),
			foreach(EID in EList)
                C[T,A,EID] = 0
			end
		end
	end,

    % incoming edges - works only for undirected graphs!!!
	foreach(A in 1..K, T in 2..M1, V in 1..N)
		if B[T,A,V] == 0 then
            out_edges(V,EList),
            foreach(EID in EList)
                edgeid(EID, V, U),
                edge(OppositeEID, U, V),
                C[T-1,A,OppositeEID] = 0
            end
        end
	end.

lower_bound(As,LB) =>
    lower_bound(As,0,LB).

lower_bound([],LB0,LB) => LB = LB0.
lower_bound([(V,FV)|As],LB0,LB) =>
    shortest_path_cost_many((V,FV),Cost),
	lower_bound(As,max(LB0,Cost),LB).


shortest_path_cost_many((_,[]),Cost) => Cost = 999999999.

shortest_path_cost_many((V,[FV|FVS]),Cost) =>
    shortest_path_cost_many((V,FVS),Cost1),
    shortest_path_cost((V,FV),Cost2),
    Cost = min(Cost1,Cost2).


% TODO - there should be upper bound
shortest_path_cost((V,FV),Cost) => 
    TmpCost = 0,
    while(not exist_shorter_path((V,FV),TmpCost))
        TmpCost := TmpCost + 1
    end,
    Cost = TmpCost.


% is there a path from V to FV that is not longer than Cost?
table (+,+)
exist_shorter_path((V,FV),Cost), Cost > 1 ?=>
	Cost1 = Cost-1,
	exist_shorter_path((V,FV),Cost1).
	
exist_shorter_path((V,V),Cost), Cost >= 0 => true.
exist_shorter_path((V,FV),Cost), Cost > 0 => 
    neibs(V,Neibs),
    member(NextV,Neibs),
    Cost1 = Cost-1,
    exist_shorter_path((NextV,FV),Cost1).


% create $edge from $neibs
create_edges(N, E) =>
	Ed1 = [],
    Ed2 = [],
	EID = 1,
	foreach(V in 1..N)
		neibs(V,Neibs),
		L = len(Neibs),
		foreach(I in 1..L)
			Ed1 := [$edge(EID, V, Neibs[I])|Ed1],
            Ed2 := [$edgeid(EID, V, Neibs[I])|Ed2],
			EID := EID + 1
		end
	end,

    cl_facts(Ed1,[$edge(-,+,+)]),
    cl_facts(Ed2,[$edgeid(+,-,-)]),
    E = len(Ed1).


% for node W, get list of outgoing edges
out_edges(W,EList) =>
	ETMP = [],
    neibs(W,Neibs),
    L = len(Neibs),
    foreach(I in 1..L)
        edge(EID,W,Neibs[I]),
        ETMP := [EID] ++ ETMP
	end,
	EList = ETMP.

% for node W, get list of incoming edges
in_edges(W,EList) =>
    ETMP = [],
    neibs(W,Neibs),
    L = len(Neibs),
    foreach(I in 1..L)
        edge(EID,Neibs[I],W),
        ETMP := [EID] ++ ETMP
    end,
    EList = ETMP.

output_plan(B) =>
    M = len(B) - 1,
    K = len(B[1]),
    N = len(B[1,1]),
    %printf("agents | timesteps\n"),
    %printf("%w %w\n",K,M+1),
    printf("timesteps %w\n",M+1),
	foreach (A in 1..K)
		foreach (T in 1..M+1)
			foreach (V in 1..N)
				if B[T,A,V] == 1 then
					printf("%w ",V)
				end
			end
		end,
        nl
	end.

% pole F je definovano jako F = new_array(M,E,K) -> M .. makespan, E .. pocet hran, K .. pocet agentu
output_flow(F) =>
    M = len(F),
    E = len(F[1]),
    K = len(F[1,1]),

    foreach (T in 1..M)
        foreach (A in 1..K)
            printf("At timestep %w, commodity %w:\n",T,A),
            foreach (Ed in 1..E)
                if F[T,Ed,A] == 1 then
                    edgeid(Ed,U,V),
                    printf("%w %w \n",U,V)
                end
            end
        end,
        nl
    end.



%%%%%%%%%%%%%%%
% TEST INPUTS %
%%%%%%%%%%%%%%%

testins4(Graph, As, Groups, LB) =>
    LB = 0,
    Graph = [
    $neibs(1,[1,2]),
    $neibs(2,[2,1,3]),
    $neibs(3,[3,2,4]),
    $neibs(4,[4,3,5]),
    $neibs(5,[5,4])
    ],
    As = [(1,[1,2,3]),(3,[1,2,3]),(2,[1,2,3]),(4,[4,5]),(5,[4,5])],
    Groups = [[1,2,3],[4,5]].

testins1(Graph, As, Groups, LB) =>
    LB = 0,
    Graph = [
    $neibs(1,[1,2]),
    $neibs(2,[2,1,3]),
    $neibs(3,[3,2,4]),
    $neibs(4,[4,3,5]),
    $neibs(5,[5,4])
    ],
    As = [(1,[1,2,3,5]),(2,[1,2,3,5]),(3,[1,2,3,5]),(5,[1,2,3,5])],
    Groups = [[1,2,3,4]].

testins5(Graph, As, Groups, LB) =>
    LB = 1,
    Graph = [
    $neibs(1,[1,5,2]),
    $neibs(2,[2,1,3]),
    $neibs(3,[3,2,4]),
    $neibs(4,[4,6,3]),
    $neibs(5,[5,1,7]),
    $neibs(6,[6,4,8]),
    $neibs(7,[7,5,9]),
    $neibs(8,[8,6,12]),
    $neibs(9,[9,7,13,10]),
    $neibs(10,[10,14,9,11]),
    $neibs(11,[11,15,10,12]),
    $neibs(12,[12,8,11,16]),
    $neibs(13,[13,9,17,14]),
    $neibs(14,[14,10,13,15]),
    $neibs(15,[15,11,14,16]),
    $neibs(16,[16,12,18,15]),
    $neibs(17,[17,13,19]),
    $neibs(18,[18,16,20]),
    $neibs(19,[19,17,21]),
    $neibs(20,[20,18,24]),
    $neibs(21,[21,19,22]),
    $neibs(22,[22,21,23]),
    $neibs(23,[23,22,24]),
    $neibs(24,[24,20,23])
    ],
    As = [(1,[8,11,12]),(2,[8,11,12]),(5,[8,11,12]),(20,[13,14,17]),(23,[13,14,17]),(24,[13,14,17])],
    Groups = [[1,2,3],[4,5,6]].


testins2(Graph, As, Groups, LB) =>
    LB = 1,
    Graph = [
    $neibs(1,[1,4,2]),
    $neibs(2,[2,5,1]),
    $neibs(3,[3,7]),
    $neibs(4,[4,1,5,8]),
    $neibs(5,[5,2,9,4,6]),
    $neibs(6,[6,5,7]),
    $neibs(7,[7,6,3,10]),
    $neibs(8,[8,4,11,9]),
    $neibs(9,[9,5,8,12]),
    $neibs(10,[10,7,14]),
    $neibs(11,[11,8,12]),
    $neibs(12,[12,9,11,13]),
    $neibs(13,[13,12,14]),
    $neibs(14,[14,10,13])
    ],
    As = [(1,[3,7,10,14]),(4,[3,7,10,14]),(8,[3,7,10,14]),(11,[3,7,10,14])],
    Groups = [[1,2,3,4]].


testins3(Graph, As, Groups, LB) =>
    LB = 6,
    Graph = [
    $neibs(1,[1,9,2]),
    $neibs(2,[2,10,1,3]),
    $neibs(3,[3,11,2,4]),
    $neibs(4,[4,12,3,5]),
    $neibs(5,[5,13,4,6]),
    $neibs(6,[6,14,5,7]),
    $neibs(7,[7,15,6,8]),
    $neibs(8,[8,16,7]),
    $neibs(9,[9,1,17,10]),
    $neibs(10,[10,2,18,9,11]),
    $neibs(11,[11,3,19,10,12]),
    $neibs(12,[12,4,20,11,13]),
    $neibs(13,[13,5,21,12,14]),
    $neibs(14,[14,6,22,13,15]),
    $neibs(15,[15,7,23,14,16]),
    $neibs(16,[16,8,24,15]),
    $neibs(17,[17,9,25,18]),
    $neibs(18,[18,10,26,17,19]),
    $neibs(19,[19,11,27,18,20]),
    $neibs(20,[20,12,28,19,21]),
    $neibs(21,[21,13,29,20,22]),
    $neibs(22,[22,14,30,21,23]),
    $neibs(23,[23,15,31,22,24]),
    $neibs(24,[24,16,32,23]),
    $neibs(25,[25,17,33,26]),
    $neibs(26,[26,18,34,25,27]),
    $neibs(27,[27,19,35,26,28]),
    $neibs(28,[28,20,36,27,29]),
    $neibs(29,[29,21,37,28,30]),
    $neibs(30,[30,22,38,29,31]),
    $neibs(31,[31,23,39,30,32]),
    $neibs(32,[32,24,40,31]),
    $neibs(33,[33,25,41,34]),
    $neibs(34,[34,26,42,33,35]),
    $neibs(35,[35,27,43,34,36]),
    $neibs(36,[36,28,44,35,37]),
    $neibs(37,[37,29,45,36,38]),
    $neibs(38,[38,30,46,37,39]),
    $neibs(39,[39,31,47,38,40]),
    $neibs(40,[40,32,48,39]),
    $neibs(41,[41,33,49,42]),
    $neibs(42,[42,34,50,41,43]),
    $neibs(43,[43,35,51,42,44]),
    $neibs(44,[44,36,52,43,45]),
    $neibs(45,[45,37,53,44,46]),
    $neibs(46,[46,38,54,45,47]),
    $neibs(47,[47,39,55,46,48]),
    $neibs(48,[48,40,56,47]),
    $neibs(49,[49,41,57,50]),
    $neibs(50,[50,42,58,49,51]),
    $neibs(51,[51,43,59,50,52]),
    $neibs(52,[52,44,60,51,53]),
    $neibs(53,[53,45,61,52,54]),
    $neibs(54,[54,46,62,53,55]),
    $neibs(55,[55,47,63,54,56]),
    $neibs(56,[56,48,64,55]),
    $neibs(57,[57,49,58]),
    $neibs(58,[58,50,57,59]),
    $neibs(59,[59,51,58,60]),
    $neibs(60,[60,52,59,61]),
    $neibs(61,[61,53,60,62]),
    $neibs(62,[62,54,61,63]),
    $neibs(63,[63,55,62,64]),
    $neibs(64,[64,56,63])
    ],
    As = [(58,[46,38,54,45,47]),(50,[46,38,54,45,47]),(57,[46,38,54,45,47]),(59,[46,38,54,45,47]),(42,[46,38,54,45,47])],
    Groups = [[1,2,3,4,5]].


testins(Graph, As, Groups, LB) =>
    LB = 20,
    Graph = [
    $neibs(1,[1,17,2]),
    $neibs(2,[2,18,1,3]),
    $neibs(3,[3,19,2,4]),
    $neibs(4,[4,20,3,5]),
    $neibs(5,[5,21,4,6]),
    $neibs(6,[6,22,5,7]),
    $neibs(7,[7,23,6,8]),
    $neibs(8,[8,24,7,9]),
    $neibs(9,[9,25,8,10]),
    $neibs(10,[10,26,9,11]),
    $neibs(11,[11,27,10,12]),
    $neibs(12,[12,28,11,13]),
    $neibs(13,[13,29,12,14]),
    $neibs(14,[14,30,13,15]),
    $neibs(15,[15,31,14,16]),
    $neibs(16,[16,32,15]),
    $neibs(17,[17,1,33,18]),
    $neibs(18,[18,2,34,17,19]),
    $neibs(19,[19,3,35,18,20]),
    $neibs(20,[20,4,36,19,21]),
    $neibs(21,[21,5,37,20,22]),
    $neibs(22,[22,6,38,21,23]),
    $neibs(23,[23,7,39,22,24]),
    $neibs(24,[24,8,40,23,25]),
    $neibs(25,[25,9,41,24,26]),
    $neibs(26,[26,10,42,25,27]),
    $neibs(27,[27,11,43,26,28]),
    $neibs(28,[28,12,44,27,29]),
    $neibs(29,[29,13,45,28,30]),
    $neibs(30,[30,14,46,29,31]),
    $neibs(31,[31,15,47,30,32]),
    $neibs(32,[32,16,48,31]),
    $neibs(33,[33,17,49,34]),
    $neibs(34,[34,18,50,33,35]),
    $neibs(35,[35,19,51,34,36]),
    $neibs(36,[36,20,52,35,37]),
    $neibs(37,[37,21,53,36,38]),
    $neibs(38,[38,22,54,37,39]),
    $neibs(39,[39,23,55,38,40]),
    $neibs(40,[40,24,56,39,41]),
    $neibs(41,[41,25,57,40,42]),
    $neibs(42,[42,26,58,41,43]),
    $neibs(43,[43,27,59,42,44]),
    $neibs(44,[44,28,60,43,45]),
    $neibs(45,[45,29,61,44,46]),
    $neibs(46,[46,30,62,45,47]),
    $neibs(47,[47,31,63,46,48]),
    $neibs(48,[48,32,64,47]),
    $neibs(49,[49,33,65,50]),
    $neibs(50,[50,34,66,49,51]),
    $neibs(51,[51,35,67,50,52]),
    $neibs(52,[52,36,68,51,53]),
    $neibs(53,[53,37,69,52,54]),
    $neibs(54,[54,38,70,53,55]),
    $neibs(55,[55,39,71,54,56]),
    $neibs(56,[56,40,72,55,57]),
    $neibs(57,[57,41,73,56,58]),
    $neibs(58,[58,42,74,57,59]),
    $neibs(59,[59,43,75,58,60]),
    $neibs(60,[60,44,76,59,61]),
    $neibs(61,[61,45,77,60,62]),
    $neibs(62,[62,46,78,61,63]),
    $neibs(63,[63,47,79,62,64]),
    $neibs(64,[64,48,80,63]),
    $neibs(65,[65,49,81,66]),
    $neibs(66,[66,50,82,65,67]),
    $neibs(67,[67,51,83,66,68]),
    $neibs(68,[68,52,84,67,69]),
    $neibs(69,[69,53,85,68,70]),
    $neibs(70,[70,54,86,69,71]),
    $neibs(71,[71,55,87,70,72]),
    $neibs(72,[72,56,88,71,73]),
    $neibs(73,[73,57,89,72,74]),
    $neibs(74,[74,58,90,73,75]),
    $neibs(75,[75,59,91,74,76]),
    $neibs(76,[76,60,92,75,77]),
    $neibs(77,[77,61,93,76,78]),
    $neibs(78,[78,62,94,77,79]),
    $neibs(79,[79,63,95,78,80]),
    $neibs(80,[80,64,96,79]),
    $neibs(81,[81,65,97,82]),
    $neibs(82,[82,66,98,81,83]),
    $neibs(83,[83,67,99,82,84]),
    $neibs(84,[84,68,100,83,85]),
    $neibs(85,[85,69,101,84,86]),
    $neibs(86,[86,70,102,85,87]),
    $neibs(87,[87,71,103,86,88]),
    $neibs(88,[88,72,104,87,89]),
    $neibs(89,[89,73,105,88,90]),
    $neibs(90,[90,74,106,89,91]),
    $neibs(91,[91,75,107,90,92]),
    $neibs(92,[92,76,108,91,93]),
    $neibs(93,[93,77,109,92,94]),
    $neibs(94,[94,78,110,93,95]),
    $neibs(95,[95,79,111,94,96]),
    $neibs(96,[96,80,112,95]),
    $neibs(97,[97,81,113,98]),
    $neibs(98,[98,82,114,97,99]),
    $neibs(99,[99,83,115,98,100]),
    $neibs(100,[100,84,116,99,101]),
    $neibs(101,[101,85,117,100,102]),
    $neibs(102,[102,86,118,101,103]),
    $neibs(103,[103,87,119,102,104]),
    $neibs(104,[104,88,120,103,105]),
    $neibs(105,[105,89,121,104,106]),
    $neibs(106,[106,90,122,105,107]),
    $neibs(107,[107,91,123,106,108]),
    $neibs(108,[108,92,124,107,109]),
    $neibs(109,[109,93,125,108,110]),
    $neibs(110,[110,94,126,109,111]),
    $neibs(111,[111,95,127,110,112]),
    $neibs(112,[112,96,128,111]),
    $neibs(113,[113,97,129,114]),
    $neibs(114,[114,98,130,113,115]),
    $neibs(115,[115,99,131,114,116]),
    $neibs(116,[116,100,132,115,117]),
    $neibs(117,[117,101,133,116,118]),
    $neibs(118,[118,102,134,117,119]),
    $neibs(119,[119,103,135,118,120]),
    $neibs(120,[120,104,136,119,121]),
    $neibs(121,[121,105,137,120,122]),
    $neibs(122,[122,106,138,121,123]),
    $neibs(123,[123,107,139,122,124]),
    $neibs(124,[124,108,140,123,125]),
    $neibs(125,[125,109,141,124,126]),
    $neibs(126,[126,110,142,125,127]),
    $neibs(127,[127,111,143,126,128]),
    $neibs(128,[128,112,144,127]),
    $neibs(129,[129,113,145,130]),
    $neibs(130,[130,114,146,129,131]),
    $neibs(131,[131,115,147,130,132]),
    $neibs(132,[132,116,148,131,133]),
    $neibs(133,[133,117,149,132,134]),
    $neibs(134,[134,118,150,133,135]),
    $neibs(135,[135,119,151,134,136]),
    $neibs(136,[136,120,152,135,137]),
    $neibs(137,[137,121,153,136,138]),
    $neibs(138,[138,122,154,137,139]),
    $neibs(139,[139,123,155,138,140]),
    $neibs(140,[140,124,156,139,141]),
    $neibs(141,[141,125,157,140,142]),
    $neibs(142,[142,126,158,141,143]),
    $neibs(143,[143,127,159,142,144]),
    $neibs(144,[144,128,160,143]),
    $neibs(145,[145,129,161,146]),
    $neibs(146,[146,130,162,145,147]),
    $neibs(147,[147,131,163,146,148]),
    $neibs(148,[148,132,164,147,149]),
    $neibs(149,[149,133,165,148,150]),
    $neibs(150,[150,134,166,149,151]),
    $neibs(151,[151,135,167,150,152]),
    $neibs(152,[152,136,168,151,153]),
    $neibs(153,[153,137,169,152,154]),
    $neibs(154,[154,138,170,153,155]),
    $neibs(155,[155,139,171,154,156]),
    $neibs(156,[156,140,172,155,157]),
    $neibs(157,[157,141,173,156,158]),
    $neibs(158,[158,142,174,157,159]),
    $neibs(159,[159,143,175,158,160]),
    $neibs(160,[160,144,176,159]),
    $neibs(161,[161,145,177,162]),
    $neibs(162,[162,146,178,161,163]),
    $neibs(163,[163,147,179,162,164]),
    $neibs(164,[164,148,180,163,165]),
    $neibs(165,[165,149,181,164,166]),
    $neibs(166,[166,150,182,165,167]),
    $neibs(167,[167,151,183,166,168]),
    $neibs(168,[168,152,184,167,169]),
    $neibs(169,[169,153,185,168,170]),
    $neibs(170,[170,154,186,169,171]),
    $neibs(171,[171,155,187,170,172]),
    $neibs(172,[172,156,188,171,173]),
    $neibs(173,[173,157,189,172,174]),
    $neibs(174,[174,158,190,173,175]),
    $neibs(175,[175,159,191,174,176]),
    $neibs(176,[176,160,192,175]),
    $neibs(177,[177,161,193,178]),
    $neibs(178,[178,162,194,177,179]),
    $neibs(179,[179,163,195,178,180]),
    $neibs(180,[180,164,196,179,181]),
    $neibs(181,[181,165,197,180,182]),
    $neibs(182,[182,166,198,181,183]),
    $neibs(183,[183,167,199,182,184]),
    $neibs(184,[184,168,200,183,185]),
    $neibs(185,[185,169,201,184,186]),
    $neibs(186,[186,170,202,185,187]),
    $neibs(187,[187,171,203,186,188]),
    $neibs(188,[188,172,204,187,189]),
    $neibs(189,[189,173,205,188,190]),
    $neibs(190,[190,174,206,189,191]),
    $neibs(191,[191,175,207,190,192]),
    $neibs(192,[192,176,208,191]),
    $neibs(193,[193,177,209,194]),
    $neibs(194,[194,178,210,193,195]),
    $neibs(195,[195,179,211,194,196]),
    $neibs(196,[196,180,212,195,197]),
    $neibs(197,[197,181,213,196,198]),
    $neibs(198,[198,182,214,197,199]),
    $neibs(199,[199,183,215,198,200]),
    $neibs(200,[200,184,216,199,201]),
    $neibs(201,[201,185,217,200,202]),
    $neibs(202,[202,186,218,201,203]),
    $neibs(203,[203,187,219,202,204]),
    $neibs(204,[204,188,220,203,205]),
    $neibs(205,[205,189,221,204,206]),
    $neibs(206,[206,190,222,205,207]),
    $neibs(207,[207,191,223,206,208]),
    $neibs(208,[208,192,224,207]),
    $neibs(209,[209,193,225,210]),
    $neibs(210,[210,194,226,209,211]),
    $neibs(211,[211,195,227,210,212]),
    $neibs(212,[212,196,228,211,213]),
    $neibs(213,[213,197,229,212,214]),
    $neibs(214,[214,198,230,213,215]),
    $neibs(215,[215,199,231,214,216]),
    $neibs(216,[216,200,232,215,217]),
    $neibs(217,[217,201,233,216,218]),
    $neibs(218,[218,202,234,217,219]),
    $neibs(219,[219,203,235,218,220]),
    $neibs(220,[220,204,236,219,221]),
    $neibs(221,[221,205,237,220,222]),
    $neibs(222,[222,206,238,221,223]),
    $neibs(223,[223,207,239,222,224]),
    $neibs(224,[224,208,240,223]),
    $neibs(225,[225,209,241,226]),
    $neibs(226,[226,210,242,225,227]),
    $neibs(227,[227,211,243,226,228]),
    $neibs(228,[228,212,244,227,229]),
    $neibs(229,[229,213,245,228,230]),
    $neibs(230,[230,214,246,229,231]),
    $neibs(231,[231,215,247,230,232]),
    $neibs(232,[232,216,248,231,233]),
    $neibs(233,[233,217,249,232,234]),
    $neibs(234,[234,218,250,233,235]),
    $neibs(235,[235,219,251,234,236]),
    $neibs(236,[236,220,252,235,237]),
    $neibs(237,[237,221,253,236,238]),
    $neibs(238,[238,222,254,237,239]),
    $neibs(239,[239,223,255,238,240]),
    $neibs(240,[240,224,256,239]),
    $neibs(241,[241,225,242]),
    $neibs(242,[242,226,241,243]),
    $neibs(243,[243,227,242,244]),
    $neibs(244,[244,228,243,245]),
    $neibs(245,[245,229,244,246]),
    $neibs(246,[246,230,245,247]),
    $neibs(247,[247,231,246,248]),
    $neibs(248,[248,232,247,249]),
    $neibs(249,[249,233,248,250]),
    $neibs(250,[250,234,249,251]),
    $neibs(251,[251,235,250,252]),
    $neibs(252,[252,236,251,253]),
    $neibs(253,[253,237,252,254]),
    $neibs(254,[254,238,253,255]),
    $neibs(255,[255,239,254,256]),
    $neibs(256,[256,240,255])
    ],
    As = [(33,[142,126,158,141,143]),(17,[142,126,158,141,143]),(49,[142,126,158,141,143]),(34,[142,126,158,141,143]),(1,[142,126,158,141,143]),(73,[193,177,209,194,161]),(57,[193,177,209,194,161]),(89,[193,177,209,194,161]),(72,[193,177,209,194,161]),(74,[193,177,209,194,161])],
    Groups = [[1,2,3,4,5],[6,7,8,9,10]].

